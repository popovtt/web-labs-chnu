document.addEventListener("DOMContentLoaded", function () {
    const countButton = document.getElementById("countButton");
    if (countButton) {
        countButton.addEventListener("click", function () {
            let numbers = document.getElementById("numberInput").value.trim();
            let digit = document.getElementById("digitInput").value.trim();

            if (!numbers || isNaN(numbers) || digit.length !== 1 || isNaN(digit)) {
                document.getElementById("countOutput").innerText = "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–≤—ñ–¥!";
                return;
            }

            let count = numbers.split('').filter(num => num === digit).length;
            document.getElementById("countOutput").innerText = `–¶–∏—Ñ—Ä–∞ ${digit} –∑—É—Å—Ç—Ä—ñ—á–∞—î—Ç—å—Å—è ${count} —Ä–∞–∑—ñ–≤`;
        });
    }


    const reverseButton = document.getElementById("reverseButton");
    if (reverseButton) {
        reverseButton.addEventListener("click", function () {
            let num = document.getElementById("reverseInput").value.trim();
            if (!num || isNaN(num)) {
                document.getElementById("reverseOutput").innerText = "–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ!";
                return;
            }
            document.getElementById("reverseOutput").innerText = num.split('').reverse().join('');
        });
    }


    const rpsButtons = document.querySelectorAll(".rpsButton");
    if (rpsButtons.length > 0) {
        rpsButtons.forEach(button => {
            button.addEventListener("click", function () {
                const choices = ["–ö–∞–º—ñ–Ω—å", "–ù–æ–∂–∏—Ü—ñ", "–ü–∞–ø—ñ—Ä"];
                let userChoice = this.dataset.choice;
                let compChoice = choices[Math.floor(Math.random() * 3)];

                let result = "";
                if (userChoice === compChoice) {
                    result = "–ù—ñ—á–∏—è!";
                } else if (
                    (userChoice === "–ö–∞–º—ñ–Ω—å" && compChoice === "–ù–æ–∂–∏—Ü—ñ") ||
                    (userChoice === "–ù–æ–∂–∏—Ü—ñ" && compChoice === "–ü–∞–ø—ñ—Ä") ||
                    (userChoice === "–ü–∞–ø—ñ—Ä" && compChoice === "–ö–∞–º—ñ–Ω—å")
                ) {
                    result = "–í–∏ –≤–∏–≥—Ä–∞–ª–∏!";
                } else {
                    result = "–í–∏ –ø—Ä–æ–≥—Ä–∞–ª–∏!";
                }

                document.getElementById("gameResult").innerText = `–ö–æ–º–ø: ${compChoice}. ${result}`;
            });
        });
    }


    const slotButton = document.getElementById("slotButton");
    if (slotButton) {
        slotButton.addEventListener("click", function () {
            const symbols = ["üçí", "üçã", "üçä", "üçâ", "‚≠ê"];
            let slots = [
                symbols[Math.floor(Math.random() * symbols.length)],
                symbols[Math.floor(Math.random() * symbols.length)],
                symbols[Math.floor(Math.random() * symbols.length)]
            ];

            document.getElementById("slotDisplay").innerText = slots.join(" ");

            if (slots[0] === slots[1] && slots[1] === slots[2]) {
                document.getElementById("slotResult").innerText = "–í–∏ –≤–∏–≥—Ä–∞–ª–∏!";
            } else {
                document.getElementById("slotResult").innerText = "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ!";
            }
        });
    }


    function setupModal() {
        const modal = document.getElementById("myModal");
        const btn = document.getElementById("logo");
        const closeBtn = document.querySelector(".close");

        if (!modal || !btn || !closeBtn) return;

        btn.addEventListener("click", function () {
            modal.style.display = "flex"; 
        });

        closeBtn.addEventListener("click", function () {
            modal.style.display = "none";
        });

        window.addEventListener("click", function (event) {
            if (event.target === modal) {
                modal.style.display = "none";
            }
        });
    }

    setupModal();
});
